@using Ais.Data.Models.Cms
@using Ais.Data.Models.Helpers
@using Microsoft.Extensions.Localization
@using Ais.Utilities.Extensions
@inject IStringLocalizer Localizer
@model Ais.Office.ViewModels.Cms.PageUpsertViewModel

@section Styles
    {
    <link href="~/css/cropper.css" rel="stylesheet" />
}

@section Scripts{
    <script src="~/bundles/cms.min.js" asp-append-version="true"></script>
}

@section Breadcrumbs
    {
    @{
        await Html.RenderPartialAsync("_Breadcrums");
    }
    }


<div class="center">
    <div class="t-tab">
        @using (Html.BeginForm("Upsert", "Cms", FormMethod.Post))
        {
            @Html.ValidationSummary(true)
            @Html.HiddenFor(m => m.Id)
            <div class="form-input">
                @Html.LabelFor(m => m.Type, new { @class = "required" })
                @(Html.Kendo().DropDownListFor(m => m.Type.Id)
                    .HtmlAttributes(
                    new
                    {
                        id = "pageType",
                        data_val = "true",
                        data_val_required = string.Format(Localizer["Required"], Html.DisplayNameFor(m => m.Type)),
                        data_content_type_id = EnumHelper.GetPageTypeIdByType(PageType.Content)
                    })
                    .DataValueField("Id")
                    .DataTextField("Name")
                    .DataSource(d => d.Read(r => r.Action("GetPageTypes", "Cms")))
                    .Deferred())
                @Html.ValidationMessageFor(m => m.Type)
            </div>
            <div class="form-input">
                @Html.LabelFor(m => m.ParentId)
                @(Html.Kendo().DropDownTreeFor(m => m.ParentId)
                    .Placeholder(Localizer["ParentPage"])
                    .Filter(FilterType.Contains)
                    .DataTextField("Title")
                    .DataValueField("Id")
                    .DataSource(dataSource => dataSource.Read(read => read.Action("ReadParentPages", "Cms")).Model(m =>
                    {
                        m.Id("Id");
                        m.HasChildren("hasChildren");
                    }))
                    .Deferred())
                @Html.ValidationMessageFor(m => m.ParentId)
            </div>
            <div class="clear"></div>
            <div class="form-input fullwidth">
                @Html.LabelFor(m => m.PermanentLink, new { @class = "required" })
                @Html.EditorFor(
            model => model.PermanentLink,
            new
            {
            htmlAttributes = new
            {
            data_val = "true",
            data_val_required = string.Format(Localizer["Required"], Html.DisplayNameFor(m => m.PermanentLink))
            }
            })
                @Html.ValidationMessageFor(m => m.PermanentLink)
            </div>
            <div class="form-input">
                @Html.LabelFor(m => m.VisibilityType, new { @class = "required" })
                @(Html.Kendo().DropDownListFor(m => m.VisibilityType.Id)
                    .HtmlAttributes(
                    new
                    {
                        data_val = "true",
                        data_val_required = string.Format(Localizer["Required"], Html.DisplayNameFor(m => m.VisibilityType))
                    })
                    .DataValueField("Id")
                    .DataTextField("Name")
                    .DataSource(d => d.Read(r => r.Action("GetPageVisibilityTypes", "Cms")))
                    .Deferred())
                @Html.ValidationMessageFor(m => m.VisibilityType)
            </div>
            <div class="form-input">
                @Html.LabelFor(m => m.LocationTypes, new { @class = "required" })
                @(Html.Kendo().MultiSelect()
                    .Name("LocationTypesMultiSelect")
                    .Value(Model.LocationTypes.IsNotNullOrEmpty() ? Model.LocationTypes.Select(x => x.Id) : null)
                    .HtmlAttributes(
                    new
                    {
                        data_val = "true",
                        data_location_type_id = EnumHelper.GetPageLocationByType(LocationType.None),
                        data_val_required = string.Format(Localizer["Required"], Html.DisplayNameFor(m => m.LocationTypes))
                    })
                    .DataValueField("Id")
                    .DataTextField("Name")
                    .TagTemplate("#var index = kendo.guid();# <input type='hidden' name='LocationTypes.Index' value='#:index#'/> <input type='hidden' name='LocationTypes[#:index#].Id' value='#:data.Id#'/> <span class=> #:data.Name# <span/> ")
                    .DataSource(d => d.Read(r => r.Action("GetPageLocationTypes", "Cms")))
                    .Deferred())
                @Html.ValidationMessageFor(m => m.LocationTypes)
            </div>
            <div class="form-input column menuTitle-js">
                <label class="empty"></label>
                @Html.Kendo().CheckBoxFor(x => x.IsInNewWindow).Deferred()
            </div>
            <div class="form-input fullwidth">
                @Html.EditorFor(model => model.Titles, "InternationalizationTextBox")
                @Html.ValidationMessageFor(m => m.Titles)
            </div>
            <div class="form-input fullwidth menuTitle-js">
                @Html.EditorFor(model => model.TitlesMenu, "InternationalizationTextBox")
                @Html.ValidationMessageFor(m => m.TitlesMenu)
            </div>
            <div class="form-input fullwidth content-js">
                @Html.EditorFor(model => model.Contents, "InternationalizationEditor")
                @Html.ValidationMessageFor(m => m.Contents)
            </div>
            <div class="form-input fullwidth content-js">
                @Html.EditorFor(model => model.Keywords, "InternationalizationTextBox")
                @Html.ValidationMessageFor(m => m.Keywords)
            </div>
            <div class="clear"></div>
            <div class="button-wrap fullwidth">
                <button type="submit" class="bttn main caps right">@Localizer["Save"]</button>
                <button type="submit" class="bttn secondary caps right content-js" name="preview" value="true">@Localizer["Preview"]</button>
            </div>
            <div class="clear"></div>
        }
    </div>
</div>