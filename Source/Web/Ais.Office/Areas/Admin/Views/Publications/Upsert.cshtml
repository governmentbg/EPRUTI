@using Ais.Data.Models.Attachment
@using Ais.Data.Models.Helpers
@using Ais.Data.Models.Publication
@using Microsoft.Extensions.Localization
@inject IStringLocalizer Localizer;
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration
@model Ais.Office.ViewModels.Publications.PublicationUpsertViewModel
@{
    var isNotNews = Model.Type.Id != EnumHelper.GetPublicationType(PublicationType.News);
    var isNewsOrEvent = Model.Type.Id == EnumHelper.GetPublicationType(PublicationType.News) || Model.Type.Id == EnumHelper.GetPublicationType(PublicationType.Event);
    var isNotMessage = Model.Type.Id != EnumHelper.GetPublicationType(PublicationType.Message);
    var asyncUploadChunkSize = Configuration.GetValue<double>("Attachment:AsyncUploadChunkSize");
}

@section Breadcrumbs
{
    @{
        await Html.RenderPartialAsync("_Breadcrums");
    }
}

@section Styles
{
    <link href="~/css/cropper.css" rel="stylesheet" />
}

@section Scripts
{
    <script src="~/bundles/admin_publications.min.js" asp-append-version="true"></script>
    <script id="picturesTemplateId" type="text/x-kendo-tmpl">
        <div class="imageDiv" style="display: inline-block">
            # var guid = kendo.guid() #
            <label>
        @Localizer["MainImage"]
                <input type="hidden" name="Pictures.Index" value="#: guid #" />
                <input type="hidden" name="Pictures[#: guid #].Url" value="#: data.Url #" />
                <input type="hidden" name="Pictures[#: guid #].Type.Id" value="95a96fb2-e956-4977-80e4-313e5b2dcf7f" />
                #if(data.IsMain)
                {#
                <input type="checkbox" data-uid="#: data.UniqueId #" name="Pictures[#: guid #].IsMain" value="#: data.IsMain #" checked="checked" />
                #} else {#
                <input type="checkbox" data-uid="#: data.UniqueId #" name="Pictures[#: guid #].IsMain" value="#: data.IsMain #" />
                #}#
            </label>
            <img style="width:200px" src="#: data.Url #" />
            <span class="k-icon k-font-icon k-i-close file-remove-js" data-element="div"></span>
        </div>
    </script>
}
<div class="content-pre-wrap">
    <div class="center">
        @using (Html.BeginForm("Upsert", "Publications", FormMethod.Post, new { id = "publicationForm", @class = "dirtylisten" }))
        {
            @Html.ValidationSummary(true)
            @Html.HiddenFor(m => m.Id)
            @Html.HiddenFor(m => m.Type.Id)
            <div class="form-input fullwidth">
                @Html.EditorFor(model => model.Titles, "InternationalizationTextBox")
                @Html.ValidationMessageFor(m => m.Titles)
            </div>
            <div class="form-input fullwidth">
                @Html.EditorFor(model => model.Contents, "InternationalizationEditor")
                @Html.ValidationMessageFor(m => m.Contents)
            </div>
            <div class="form-input w-auto">
                @Html.LabelFor(m => m.StartDate, new { @class = "required" })
                @Html.Kendo().DateTimePickerFor(m => m.StartDate).Deferred(true)
                @Html.ValidationMessageFor(m => m.StartDate)
            </div>
            if (isNotNews)
            {
                <div class="form-input w-auto">
                    @Html.LabelFor(m => m.EndDate, new { @class = "required" })
                    @Html.Kendo().DateTimePickerFor(m => m.EndDate).Deferred(true)
                    @Html.ValidationMessageFor(m => m.EndDate)
                </div>
            }
            if (!isNewsOrEvent)
            {
                <div class="form-input w-auto">
                    <label class="empty"></label>
                    @Html.Kendo().CheckBoxFor(m => m.IsLead).Label(Localizer["IsLeadPublication"]).Deferred()
                </div>
            }
            else
            {
                <div class="form-input w100">
                    @Html.LabelFor(m => m.Order)
                    @Html.Kendo().NumericTextBoxFor(m => m.Order).Decimals(0).Min(0).Max(4).Format("n0").Deferred()
                </div>
            }
            <div class="form-input w-auto">
                <label class="empty"></label>
                @Html.Kendo().CheckBoxFor(m => m.IsVisibleInWeb).Label(Localizer["VisibilityInPublicPart"]).Deferred()
            </div>
            if (!isNotMessage)
            {
                <div class="form-input w-auto">
                    <label class="empty"></label>
                    @Html.Kendo().CheckBoxFor(m => m.IsVisibleInOffice).Label(Localizer["VisibleInOffice"]).Deferred()
                </div>
            }
            @if (isNewsOrEvent)
            {
                <div class="form-input fullwidth">
                    @(Html.Kendo().ListView(Model.Pictures ?? new List<GenericAttachment>())
                        .ClientTemplateId("picturesTemplateId")
                        .Name("Pictures")
                        .TagName("div")
                        .DataSource(dataSource => dataSource.Ajax().ServerOperation(false).Model(m => { m.Id("UniqueId"); }).PageSize(30))
                        .Deferred())
                    @(Html.Kendo().Sortable()
                        .For("#Pictures")
                        .Filter("div.imageDiv")
                        .Cursor("move")
                        .PlaceholderHandler("admin_publications.placeholderAttachmentPositionChange")
                        .HintHandler("admin_publications.hintAttachmentPositionChange")
                        .Events(events => events.Change("admin_publications.onAttachmentPositionChange"))
                        .Deferred())
                    @(Html.Kendo().Upload()
                        .Name("imageUploader")
                        .HtmlAttributes(new { accept = ".jpg, .png, .jpeg", data_width = "780", data_height = "585" })
                        .Messages(x => x.Select(Localizer["SelectFiles"])
                        .DropFilesHere(Localizer["DropFilesHere"])
                        .InvalidFileExtension(Localizer["InvalidFileExtension"])
                        .Cancel(Localizer["Cancel"]))
                        .Async(a => a
                        .Save("UploadStaticFiles", "Attachment", new { area = string.Empty }).ChunkSize(asyncUploadChunkSize)
                        .Remove("RemoveStaticFiles", "Attachment", new { area = string.Empty })
                        .AutoUpload(false))
                        .Events(e => e.Select("admin_publications.onImageSelect").Success("admin_publications.onPublicationAttachmentSuccessUpload"))
                        .ShowFileList(false)
                        .DropZone("#Pictures")
                        .Multiple(false)
                        .Validation(validation =>
                        {
                            validation.AllowedExtensions(new[] { ".jpg", ".png", ".jpeg" });
                            validation.MaxFileSize(10000000);
                            validation.MinFileSize(1);
                        })
                        .Deferred())
                </div>
            }
            <div class="clear"></div>
            <div class="button-wrap fullwidth">
                <button type="submit" class="bttn main caps right">@Localizer["Save"]</button>
                @if (isNotMessage)
                {
                    <button type="submit" class="bttn secondary caps right" name="preview" value="true">@Localizer["Preview"]</button>
                }
            </div>
            <div class="clear"></div>
        }
    </div>
</div>
