@inject IStringLocalizer Localizer
@inject IOptions<AttachmentOptions> ApplicationOption
@using Ais.WebUtilities.Extensions
@using Ais.WebUtilities.Helpers
@using Kendo.Mvc.TagHelpers
@using Ais.Utilities.Extensions
@using Ais.Data.Models.Attachment
@using Ais.Data.Models.Document
@using Ais.Infrastructure.KendoExt
@using Ais.Infrastructure.Options
@using Microsoft.Extensions.Localization
@using Microsoft.Extensions.Options
@using UploadFile = Ais.Infrastructure.KendoExt.UploadFile
@model Ais.Data.Models.Attachment.AttachmentType
@{
    var attachment = ViewBag.Attachment as Attachment;
    var required = ViewBag.Required is bool && (bool)ViewBag.Required;
    var deferred = !ViewContext.HttpContext.Request.IsAjaxRequest();
    var type = Model;
    var uniqueId = attachment?.UniqueId ?? Guid.NewGuid().ToString();
    var docRelId = Model?.GroupRelDocId != null ? Model?.GroupRelDocId : ViewBag?.GroupRelDocId as Guid?;
    var prefix = $"Attachments[{uniqueId}].";
    <div class="step-box-body">
        @Html.Hidden("Attachments.Index", uniqueId)
        @Html.Hidden($"{prefix}Type.Id", type.Id)
        @Html.Hidden($"{prefix}Type.Title", type.Title)
        @Html.Hidden($"{prefix}Type.GroupRelDocId", docRelId)
        @Html.Hidden($"{prefix}UniqueId", uniqueId)
        @Html.Hidden($"{prefix}GroupRelDocId", docRelId)
        <div class="column-wrap">
            <div class="column">
                <div class="form-input fullwidth file">
                    @Html.InfoLabel(Localizer["UploadFile"], key: "UploadFile", labelClass: required ? "required" : string.Empty)
                    @(Html.Kendo().Upload()
                              .Name($"{prefix}Url")
                              .Messages(x => x.Select(Localizer["SelectFiles"])
                                              .DropFilesHere(Localizer["DropFilesHere"])
                                              .InvalidFileExtension(Localizer["InvalidFileExtension"])
                                              .Cancel(Localizer["Cancel"]))
                    .HtmlAttributes(new { accept = type.Extensions, id = Guid.NewGuid().ToString(), data_prefix = prefix, name = string.Empty, data_groupreldocid = docRelId })
                              .Async(a => a
                                         .Save("Upload", "Attachment", new { Area = string.Empty })
                                         .Remove("Remove", "Attachment", new { Area = string.Empty })
                                         .AutoUpload(true)
                                     .ChunkSize(ApplicationOption.Value.AsyncUploadChunkSize)
                                     .Concurrent(false))
                          .ShowFileList(true)
                          .Multiple(false)
                          .TemplateId("fileTemplate")
                          .Validation(validation =>
                          {
                              validation.AllowedExtensions(type.ExtensionsCollection);
                              validation.MaxFileSize(type.MaxSizeInBytes);
                              validation.MinFileSize(1);
                          })
                          .Events(e => e.Upload("core.onUpload").Success("core.onUploadSuccess"))
                          .Files(files =>
                          {
                              if (attachment?.Url.IsNotNullOrEmpty() == true || attachment?.Id.HasValue == true)
                              {
                                  files.AddCustomFile(
                                      new UploadFile
                                      {
                                          Name = attachment.Name,
                                          Url = attachment.Url,
                                          Id = attachment.Id,
                                          Size = attachment.Size,
                                          Extension = attachment.Extension,
                                          Data = new Dictionary<string, object> 
                                          { 
                                              { "prefix", prefix },
                                              { "groupreldocid", docRelId }
                          }
                                      });
                              }
                          })
                          .Deferred(deferred)
                    )
                    @Html.ValidationMessage($"{prefix}Url")
                    <small>
                        @($"{Localizer["AllowExtensions"]}: {type?.Extensions}, {Localizer["MaxFileSize"]}: {type?.MaxSize} MB.")
                    </small>
                </div>
            </div>
            <div class="column">
                <div class="form-input fullwidth ">
                    @Html.InfoLabel(Localizer["Description"], key: "UploadFile")
                    @(Html.Kendo().TextBox()
                          .Name($"{prefix}Description")
                          .HtmlAttributes(new { id = Guid.NewGuid().ToString() })
                          .Value(attachment?.Description)
                          .Deferred(deferred))
                </div>
                @if (ViewBag.DontShowRelateObject is not true)
                {
                    <div class="form-input fullwidth">
                        @{
                            var hasObjects = (attachment as ObjectAttachment)?.Objects?.Count > 0;
                        }
                        @(Html.Kendo().CheckBox()
                            .Name(Guid.NewGuid().ToString())
                            .HtmlAttributes(new { name = string.Empty, @class = "relate-objects-js" })
                            .Label(Localizer["RelateWithSelectedObjects"])
                            .Checked(hasObjects)
                            .Deferred(deferred))
                    </div>
                <div class="form-input fullwidth">
                    <button type="button" class="bttn small right third attachment-objects-js @(hasObjects ? string.Empty : "hidden")" value="@uniqueId">
                        @Localizer["ChangeObjects"]
                    </button>
                </div>
                }
            </div>
            <div class="cancelelement">
                <label class="empty"></label>
                <button type="button" class="bttn small cancel remove-attachment-js">
                    X
                </button>
            </div>
        </div>
    </div>
}